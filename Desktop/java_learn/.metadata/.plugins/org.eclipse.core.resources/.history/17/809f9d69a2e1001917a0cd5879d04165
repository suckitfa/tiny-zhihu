package experiment_1;
import java.util.regex.*;
import java.util.*;
import java.util.Scanner;

public class CalculatorTest{
	int result;
	int flag = 0;
	CalculatorTest(){

	}

	/*
	*	判断表达是是否合法
	*/
	public static boolean isLegal(String expression){
		//正确模式
		String pattern = "((\\(-?\\d+\\))|-?(\\d+))([+\\-*\\/]((\\(\\-\\d+\\))|(\\d+)))+";
		Pattern p = Pattern.compile(pattern);
		Matcher m = p.matcher(expression);
		if(m.matches()) {
			return true;
		}
		
		return false;
	}
	
//	public double computeTwo(double data_1, double data_2, char op) {
//		double res =0 ;
//		if(op == '+') {
//			res = data_1 + data_2;
//		}else if(op == '-') {
//			res = data_1 - data_2;
//		}else if(op == '*') {
//			res = data_1*data_2;
//		}else if(op == '/') {
//			res = data_1 / data_2;
//		}
//		
//		return res;
//	}
//	/*
//	 * 计算合法的表达式
//	 * */
//	public String calculate(String expression) {
//			/* 操作数数组 */
//	        List<Double> number = new ArrayList<Double>();
//	        /* 运算符数组 */
//	        List<Character> operator = new ArrayList<Character>();
//	
//	        /* 将legalExp中的操作数和操作符
//	         * 分散到运算数和运算符数组 
//	         * */
//	        //这个正则为匹配表达式中的数字
//	        Pattern p = Pattern.compile("(?<!\\d)-?\\d+(\\.\\d+)?");
//	        Matcher m = p.matcher(expression);
//	        while (m.find()) {
//	            number.add( Double.valueOf(m.group()) );//将该数字放进数字的数组
//	            if (m.end() < expression.length()) {
//	            	char op;
//	            	op = expression.charAt(m.end());
//	            	if(op == ')') {
//	            		op = expression.charAt(m.end()+1);		//数字在括号里面
//	            		operator.add(op);
//	            	}else {
//	            		operator.add(expression.charAt(m.end())); //与该数字相邻的运算符放入运算符的数组
//	            	}
//	            }
//	        }
//	   
//	        
//	        //使用栈来存储结果
//	       Stack<Double> numberStack = new Stack<Double>();
//	          for(int i = number.size()-1;i >= 0; i--) {
//	        	  numberStack.push(number.get(i));
//	          }
//	          for(int i =0; i < operator.size();i++) {
//	        	  numberStack.push(computeTwo(numberStack.pop(),numberStack.pop(),operator.get(i)));
//	          }
//	          
//	     
//	          return numberStack.pop() + "";     
//	          
//	          
//	}
	//设置优先级 + - * / 同属于一个优先级，（从左到右计算）
	public int setPriority(char op) {
		if(op == '(') {
			return 1;
		}else if(op == '+' || op == '-' || op == '*'|| op == '/') {
			return 2;
		}else {
			return 3;
		}
	}
	public String setPostExpression(String expression) {
		Stack<Character> myStack = new Stack<Character>();
		int size = expression.length();
		int i = 0;
		char tmp;
		String res = "";
		 while (i < size) {
		        if (expression.charAt(i) >= '0' && expression.charAt(i) <= '9'){
		            res += expression.charAt(i);
		        }
		        else if (expression.charAt(i) == '+' || expression.charAt(i) == '-' || expression.charAt(i) == '*' || expression.charAt(i) == '/') {
		            if (myStack.empty()) {
		                myStack.push(expression.charAt(i));
		            }
		            else {
		                while (!myStack.empty()) {
		                    tmp = myStack.peek();
		                    if (setPriority(tmp) >= setPriority(expression.charAt(i))) {
		                        //弹出栈顶元素
		                        res += tmp;
		                        myStack.pop();
		                    }
		                    else break;
		                }
		                myStack.push(expression.charAt(i));
		            }
		        }
		        else {
		            if(expression.charAt(i)=='(') myStack.push(expression.charAt(i));
		            else {
		                while (myStack.peek() != '(') {
		                    tmp = myStack.peek();
		                    res += tmp;
		                    myStack.pop();
		                }
		                myStack.pop();
		            }
		        }
		        i++;
		    }
		 //遍历完后，若栈非空，弹出所有元素
		    while (!myStack.empty()) {
		        tmp = myStack.top();
		        res += tmp;
		        myStack.pop();
		    }
		    return res;
	}
	//获取用户输入的表达式
	public String getExpression() {
		Scanner input = new Scanner(System.in);
		String expression = input.nextLine();
		expression = expression.replace(" ",""); //除去多余空格
		return expression;
	}

	// 测试
	public static void main(String [] args){
		CalculatorTest r = new CalculatorTest();
		String expression = r.getExpression();
		
		
		if(r.isLegal(expression)) {
			String result = r.calculate(expression);
			if("Infinity".equals(result)) {//借助Java中 Infinity
				System.out.print("Error:Divided by zero!");
			}else {
				String newResult = String.format("%.0f",Double.parseDouble(result));
				System.out.print(expression + "=" + newResult);
			}
		}else {
			System.out.print("FORMAT ERROR!");
		}
		

	}
}
